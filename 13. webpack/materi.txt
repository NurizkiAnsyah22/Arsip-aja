Berikut ini adalah materi lengkap tentang Webpack, termasuk konsep dasar, instalasi, konfigurasi, dan fitur-fitur utama:

**1. Apa itu Webpack?**
Webpack adalah sebuah *module bundler* untuk JavaScript yang membantu mengelola dependensi dan mengemas kode aplikasi ke dalam beberapa file bundle. Ini memungkinkan pengembang untuk membagi kode menjadi modul-modul terpisah dan mengoptimalkan performa serta keberlanjutan aplikasi.

**2. Instalasi Webpack**
Untuk menginstal Webpack, Anda perlu memiliki Node.js terlebih dahulu. Kemudian, jalankan perintah berikut menggunakan NPM (Node Package Manager):

```
npm install webpack webpack-cli --save-dev
```

**3. Konfigurasi Webpack**
Untuk konfigurasi Webpack, Anda perlu membuat file `webpack.config.js` di direktori proyek Anda. Berikut ini contoh konfigurasi dasar:

```javascript
const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: 'babel-loader',
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
};
```

**4. Konsep Utama Webpack**
- **Entry Point**: Titik masuk aplikasi yang menentukan di mana proses bundling dimulai.
- **Output**: Tempat file bundle hasil bundling akan disimpan.
- **Loaders**: Membantu Webpack memahami berbagai jenis file, seperti JavaScript, CSS, atau gambar.
- **Plugins**: Menambahkan fungsionalitas tambahan ke Webpack, seperti minifikasi kode, pengoptimalan, dan penanganan aset statis.
- **Mode**: Mode pengembangan (`development`) atau produksi (`production`) yang mempengaruhi optimasi dan penanganan kesalahan dalam bundle.
- **DevServer**: Membantu dalam pengembangan lokal dengan menyediakan server pengembangan dan fitur *hot-reloading*.

**5. Menggunakan Loaders**
Loaders membantu Webpack memproses file non-JavaScript. Berikut ini contoh penggunaan loaders:

- Menggunakan Babel untuk transpilasi ES6+ menjadi JavaScript yang kompatibel dengan browser:
```javascript
module: {
  rules: [
    {
      test: /\.js$/,
      exclude: /node_modules/,
      use: 'babel-loader',
    },
  ],
}
```

- Menggunakan CSS Loader dan Style Loader untuk memuat file CSS:
```javascript
module: {
  rules: [
    {
      test: /\.css$/,
      use: ['style-loader', 'css-loader'],
    },
  ],
}
```

**6. Menggunakan Plugins**
Webpack memiliki berbagai plugins yang dapat meningkatkan fungsionalitas bundling. Berikut ini contoh penggunaan plugin tersedia:

- HtmlWebpackPlugin: Membuat file HTML dan menyertakan script bundle otomatis.
```javascript
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  // ...
  plugins: [
    new HtmlWebpackPlugin({
      template: './src/index.html',
    }),
  ],
};
```

- CleanWebpackPlugin: Menghapus file bundle sebelum melakukan pembuatan bundle baru.
```javascript
const { CleanWebpackPlugin } = require('clean-webpack-plugin');

module.exports = {
  // ...
  plugins: [
    new CleanWebpackPlugin(),
  ],
};
```

**7. Menjalankan Webpack**
Anda dapat menjalankan Webpack dengan menjalankan perintah berikut:
```
npx webpack
```
Perintah ini akan menjalankan proses bundling berdasarkan konfigurasi yang ada.

**8. Pengaturan Development Server**
Anda dapat menggunakan Webpack DevServer untuk menjalankan server pengembangan lokal. Pastikan Anda telah menginstal paket `webpack-dev-server`. Kemudian, tambahkan pengaturan DevServer pada konfigurasi Webpack:

```javascript
module.exports = {
  // ...
  devServer: {
    contentBase: './dist',
    port: 8080,
  },
};
```

Setelah itu, jalankan perintah berikut untuk menjalankan server pengembangan:
```
npx webpack serve
```

Ini adalah pengantar singkat tentang Webpack dan bagaimana menggunakannya. Webpack sangat fleksibel dan memiliki banyak fitur yang dapat dijelajahi. Dalam pengembangan nyata, Anda juga dapat menggabungkan Webpack dengan alat lain seperti Babel, ESLint, atau CSS preprocessors untuk pengalaman pengembangan yang lebih kuat.